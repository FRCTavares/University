// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class ScoreUpdate;
class ScoreUpdateDefaultTypeInternal;
extern ScoreUpdateDefaultTypeInternal _ScoreUpdate_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ScoreUpdate* Arena::CreateMaybeMessage<::ScoreUpdate>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class ScoreUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ScoreUpdate) */ {
 public:
  inline ScoreUpdate() : ScoreUpdate(nullptr) {};
  virtual ~ScoreUpdate();

  ScoreUpdate(const ScoreUpdate& from);
  ScoreUpdate(ScoreUpdate&& from) noexcept
    : ScoreUpdate() {
    *this = ::std::move(from);
  }

  inline ScoreUpdate& operator=(const ScoreUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScoreUpdate& operator=(ScoreUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ScoreUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoreUpdate* internal_default_instance() {
    return reinterpret_cast<const ScoreUpdate*>(
               &_ScoreUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScoreUpdate& a, ScoreUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ScoreUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScoreUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScoreUpdate* New() const final {
    return CreateMaybeMessage<ScoreUpdate>(nullptr);
  }

  ScoreUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScoreUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScoreUpdate& from);
  void MergeFrom(const ScoreUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ScoreUpdate";
  }
  protected:
  explicit ScoreUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScoresFieldNumber = 1,
    kCharactersFieldNumber = 2,
  };
  // repeated int32 scores = 1;
  int scores_size() const;
  private:
  int _internal_scores_size() const;
  public:
  void clear_scores();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scores(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_scores() const;
  void _internal_add_scores(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_scores();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 scores(int index) const;
  void set_scores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_scores(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      scores() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_scores();

  // repeated string characters = 2;
  int characters_size() const;
  private:
  int _internal_characters_size() const;
  public:
  void clear_characters();
  const std::string& characters(int index) const;
  std::string* mutable_characters(int index);
  void set_characters(int index, const std::string& value);
  void set_characters(int index, std::string&& value);
  void set_characters(int index, const char* value);
  void set_characters(int index, const char* value, size_t size);
  std::string* add_characters();
  void add_characters(const std::string& value);
  void add_characters(std::string&& value);
  void add_characters(const char* value);
  void add_characters(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& characters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_characters();
  private:
  const std::string& _internal_characters(int index) const;
  std::string* _internal_add_characters();
  public:

  // @@protoc_insertion_point(class_scope:ScoreUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > scores_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> characters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScoreUpdate

// repeated int32 scores = 1;
inline int ScoreUpdate::_internal_scores_size() const {
  return scores_.size();
}
inline int ScoreUpdate::scores_size() const {
  return _internal_scores_size();
}
inline void ScoreUpdate::clear_scores() {
  scores_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScoreUpdate::_internal_scores(int index) const {
  return scores_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScoreUpdate::scores(int index) const {
  // @@protoc_insertion_point(field_get:ScoreUpdate.scores)
  return _internal_scores(index);
}
inline void ScoreUpdate::set_scores(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:ScoreUpdate.scores)
}
inline void ScoreUpdate::_internal_add_scores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  scores_.Add(value);
}
inline void ScoreUpdate::add_scores(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_scores(value);
  // @@protoc_insertion_point(field_add:ScoreUpdate.scores)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ScoreUpdate::_internal_scores() const {
  return scores_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ScoreUpdate::scores() const {
  // @@protoc_insertion_point(field_list:ScoreUpdate.scores)
  return _internal_scores();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ScoreUpdate::_internal_mutable_scores() {
  return &scores_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ScoreUpdate::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:ScoreUpdate.scores)
  return _internal_mutable_scores();
}

// repeated string characters = 2;
inline int ScoreUpdate::_internal_characters_size() const {
  return characters_.size();
}
inline int ScoreUpdate::characters_size() const {
  return _internal_characters_size();
}
inline void ScoreUpdate::clear_characters() {
  characters_.Clear();
}
inline std::string* ScoreUpdate::add_characters() {
  // @@protoc_insertion_point(field_add_mutable:ScoreUpdate.characters)
  return _internal_add_characters();
}
inline const std::string& ScoreUpdate::_internal_characters(int index) const {
  return characters_.Get(index);
}
inline const std::string& ScoreUpdate::characters(int index) const {
  // @@protoc_insertion_point(field_get:ScoreUpdate.characters)
  return _internal_characters(index);
}
inline std::string* ScoreUpdate::mutable_characters(int index) {
  // @@protoc_insertion_point(field_mutable:ScoreUpdate.characters)
  return characters_.Mutable(index);
}
inline void ScoreUpdate::set_characters(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ScoreUpdate.characters)
  characters_.Mutable(index)->assign(value);
}
inline void ScoreUpdate::set_characters(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ScoreUpdate.characters)
  characters_.Mutable(index)->assign(std::move(value));
}
inline void ScoreUpdate::set_characters(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  characters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ScoreUpdate.characters)
}
inline void ScoreUpdate::set_characters(int index, const char* value, size_t size) {
  characters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ScoreUpdate.characters)
}
inline std::string* ScoreUpdate::_internal_add_characters() {
  return characters_.Add();
}
inline void ScoreUpdate::add_characters(const std::string& value) {
  characters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ScoreUpdate.characters)
}
inline void ScoreUpdate::add_characters(std::string&& value) {
  characters_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ScoreUpdate.characters)
}
inline void ScoreUpdate::add_characters(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  characters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ScoreUpdate.characters)
}
inline void ScoreUpdate::add_characters(const char* value, size_t size) {
  characters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ScoreUpdate.characters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ScoreUpdate::characters() const {
  // @@protoc_insertion_point(field_list:ScoreUpdate.characters)
  return characters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ScoreUpdate::mutable_characters() {
  // @@protoc_insertion_point(field_mutable_list:ScoreUpdate.characters)
  return &characters_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
