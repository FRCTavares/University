Number: 1415372876

1. Seeding the Random Generator with srandom(n)
The line srandom(n); sets the seed for the pseudorandom number generator using the variable n, which is derived from your 
student number input. A seed initializes the random generator's state. If you always use the same seed, like your student 
number, the random generator will always produce the same sequence of "random" numbers. This is because pseudorandom generators 
work by following a deterministic algorithm that generates a sequence of numbers based on the initial seed.

So, if you input the same student number every time, the random() function will generate the same sequence of numbers every time.

2. Is random() Truly Random?
No, random() is not truly random; it's "pseudorandom." True randomness implies unpredictability, which typically requires 
hardware-based entropy sources, such as those based on physical processes (e.g., radioactive decay or thermal noise). 
However, functions like random() only simulate randomness by following an algorithm that produces a seemingly random 
sequence but is entirely predictable if you know the seed.

MakeFile:

main : main.c funcs.h funcs.c
    gcc -g -o main main.c funcs.c
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Part B - C Programming Revision

To compile a program: gcc -o main main.c
To run a program: ./main

int main(int argc, char* argv[]) 
argc -> is the number of elements of argv.
argv -> is a vector of strings. The first string is the name of the program.
****************************************************************************************************************************************************************************************
Exercise 1:
int main(int argc, char *argv[])
{
    // Calculate the length of the final string
    int length = 0;
    for (int i=1; i<argc; i++)
    {
        length += strlen(argv[i]);
    }

    // Allocate memory for the final string (+1 for \0)
    char *result_str = (char *)malloc((length+1) * sizeof(char));
    if (result_str == NULL)
    {
        printf("Memory allocation failed!\n");
        return 1;
    }

    result_str[0] = '\0'; // Initialize the string

    // Concatenate all the arguments
    for (int i=1; i<argc; i++)
    {
        strcat(result_str, argv[i]);
    }

    // Print the final string
    printf("%s\n", result_str);

    // Free the allocated memory
    free(result_str);

    return 0;
}
****************************************************************************************************************************************************************************************
Exercise 2:
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char* argv[]){

    // Calculate the length of the final string
    int length = 0;
    for (int i=1; i<argc; i++){
        int j = 0;
        while(argv[i][j] != '\0'){
            length++;
            j++;
        }
    }

    // Allocate memory for the final string (+1 for \0)
    char *result_str = (char *)malloc((length+1) * sizeof(char));
    if (result_str == NULL){
        printf("Memory allocation failed!\n");
        return 1;
    }

    // Concatenate all the arguments
    int position = 0;
    for (int i=1; i<argc; i++){
        int j = 0;
        while(argv[i][j] != '\0'){
            result_str[position] = argv[i][j];
            position++;
            j++;
        }
    }

    result_str[position] = '\0'; // end string


    // Print the final string
    printf("%s\n", result_str);

    // Free the allocated memory
    free(result_str);

    return 0;
}
****************************************************************************************************************************************************************************************
When the gcc command is used, and the compiler creates the executable, the compiler translates the C code into assembly and links the resulting assembly code with all the necessary libraries.
It is possible to separate these two steps (translation to assembly and linking) by issuing two different gcc commands:
gcc -c main.c
gcc main.o â€“ o main

Exercise 3:
- How to just compile lib1.c?
If you try to compile lib1.c by running gcc lib1.c, it will compile, but since lib1.c has no main function, it will only create an object file (not an executable).
To compile lib1.c into an object file, use:
gcc -c lib1.c
This creates an object file named lib1.o, which you can later link to other code files.

- How to create a program?
gcc prog1.c lib1.c -o prog1

- Compile the file prog1.c (and create a program) to use the lib1.c functions.
./prog1
func 1 inside lib1
func 2 inside lib2
****************************************************************************************************************************************************************************************
Exercise 4:

Makefile:
# Compile all source files into the program 'prog1'
prog1: prog1.c lib1.c
	gcc -g -o prog1 prog1.c lib1.c

# Clean up compiled files
clean:
	rm -f prog1
	
	****************************************************************************************************************************************************************************************
Pointers to Functions:

int (*function_pointer)(int a, int b)

This declaration is compatible with functions like:
int regular_function(int a, int b)

To store the a any function in the variable, the programmer should do an assignment:
function_pointer = regular_function

it is now possible to call the function trough a variable:
function_pointer(12, 14).

It is also possible to declare a type that corresponds to a function pointer:typedef int (*type_pf)(int a, int b);
type ptr_f;
ptr_f = regular_function;

or even declare arrays of functions:
int (*array_ptr[2])(int a, int b)
array_ptr[0] = array_ptr[1] = callme;
array_ptr[0](12, 13)
****************************************************************************************************************************************************************************************
Exercise 4 C:
#include "lib.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <dlfcn.h>

int main(){
    int a;
    char line[100];
    char library_name[100];
    void *handle;
    void (*func_1)();
    void (*func_2)();

    printf("What version of the functions do you want to use?\n");
    printf("\t1 - Normal (lib1)\n");
    printf("\t2 - Optimized (lib2)\n");
    fgets(line, 100, stdin);
    sscanf(line, "%d", &a);

    // Set the library path based on user input
    if (a == 1) {
        strcpy(library_name, "./lib1.so");
        printf("Running the normal version from %s\n", library_name);
    } else if (a == 2) {
        strcpy(library_name, "./lib2.so");
        printf("Running the optimized version from %s\n", library_name);
    } else {
        printf("Invalid selection. Exiting.\n");
        exit(-1);
    }

    // Load the library
    handle = dlopen(library_name, RTLD_LAZY);
    if (!handle) {
        fprintf(stderr, "Error: %s\n", dlerror());
        exit(1);
    }

    // Load the functions from the library
    func_1 = dlsym(handle, "func_1");
    func_2 = dlsym(handle, "func_2");

    // Call the functions
    if (func_1) func_1();
    if (func_2) func_2();

    // Close the library
    dlclose(handle);

    return 0;
}

