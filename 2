import os
os.environ["SDL_AUDIODRIVER"] = "dummy"
import pygame
import sys
import math
import numpy as np
import matplotlib.pyplot as plt

# Define a safe threshold
SAFE_THRESHOLD = 5

# PD controller to compute the steering angle correction
def pd_controller(error, prev_error, Kp, Kd, dt):
    """
    PD controller to compute the steering angle correction.
    """
    if abs(error) < SAFE_THRESHOLD:
        return 0  # No correction needed if within the safe threshold
    derivative = (error - prev_error) / dt
    control = Kp * error + Kd * derivative
    return control

def kinematics_matrix(theta, phi, V, omega, L):
    """
    Compute the rate of change of the robot's state using the kinematics matrix.
    """
    kinematics_mat = np.array([
        [np.cos(theta) * np.cos(phi), 0],
        [np.sin(theta) * np.cos(phi), 0],
        [np.sin(phi) / L,             0],
        [0,                           1]
    ])
    velocity_vec = np.array([V, omega])
    return np.dot(kinematics_mat, velocity_vec)

def simulate_motion(initial_state, V, omega, L, dt, max_phi):
    """
    Simulate the motion of the robot for one time step using Euler integration.
    """
    x, y, theta, phi = initial_state
    derivatives = kinematics_matrix(theta, phi, V, omega, L)
    new_state = initial_state + derivatives * dt
    # Constrain phi to the maximum steering angle
    new_state[3] = max(-max_phi, min(max_phi, new_state[3]))
    return new_state



class Car:
    def __init__(self, x, y, theta=0, phi=0, V=0, omega=0):
        self.x = x
        self.y = y
        self.theta = theta
        self.phi = phi
        self.V = V
        self.omega = omega

    def update_state(self):
        initial_state = np.array([self.x, self.y, self.theta, self.phi])
        new_state = simulate_motion(initial_state, self.V, self.omega, L, dt, max_phi)
        self.x, self.y, self.theta, self.phi = new_state
        self.theta = normalize_angle(self.theta)

    def draw(self, screen):
        # Draw the car (rotated)
        car_surface = pygame.Surface((car_width, car_height), pygame.SRCALPHA)
        car_surface.fill(RED)
        rotated_car = pygame.transform.rotate(car_surface, -math.degrees(self.theta))
        car_rect = rotated_car.get_rect(center=(self.x, self.y))
        screen.blit(rotated_car, car_rect.topleft)

        # Draw the wheel (rotated)
        wheel_surface = pygame.Surface((car_width / 3, car_height / 5), pygame.SRCALPHA)
        wheel_surface.fill(BLUE)
        rotated_wheel = pygame.transform.rotate(wheel_surface, -math.degrees(self.theta) - math.degrees(self.phi))
        wheel_rect = rotated_wheel.get_rect(center=(self.x + (L / 2 - 10) * math.cos(self.theta), self.y + (L / 2 - 10) * math.sin(self.theta)))
        screen.blit(rotated_wheel, wheel_rect.topleft)


def draw_sine_waves(screen, color, width, height):
    amplitude1 = 100
    frequency1 = 1
    amplitude2 = 100
    frequency2 = 2

    wave1_points = []
    wave2_points = []

    # First sine wave
    for x in range(0, width):
        y1 = 100 + int(height // 2 + amplitude1 * math.sin(2 * math.pi * frequency1 * x / width))
        pygame.draw.circle(screen, color, (x, y1), 2)
        wave1_points.append((x, y1))

    # Second sine wave
    for x in range(0, width):
        y2 = -100 + int(height // 2 + amplitude2 * math.sin(2 * math.pi * frequency2 * x / width))
        pygame.draw.circle(screen, color, (x, y2), 2)
        wave2_points.append((x, y2))

    return wave1_points, wave2_points

def detect_collision(car_mask, car_rect, wave_mask, wave_rect):
    offset = (wave_rect.left - car_rect.left, wave_rect.top - car_rect.top)
    overlap = car_mask.overlap(wave_mask, offset)
    if overlap:
        collision_point = (car_rect.left + overlap[0], car_rect.top + overlap[1])
        print(f"Collision at {collision_point}")
        return collision_point
    return None

def normalize_angle(angle):
    return angle % (2 * math.pi)

def simulate_sensors(car_pos, car_angle, sensor_angles, sensor_length, screen, all_wave_points, wave1_points, wave2_points):
    """
    Simulate sensors fixed to the car frame and detect if they detect the sine waves.
    """
    detections = []
    for angle_offset in sensor_angles:
        total_angle = normalize_angle(car_angle + math.radians(angle_offset))
        end_x = car_pos[0] + sensor_length * math.cos(total_angle)
        end_y = car_pos[1] + sensor_length * math.sin(total_angle)
        pygame.draw.line(screen, (0, 255, 0), car_pos, (end_x, end_y), 1)

        closest_point = None
        min_distance = sensor_length
        for point in all_wave_points:
            dx = point[0] - car_pos[0]
            dy = point[1] - car_pos[1]
            distance = math.hypot(dx, dy)
            if distance > sensor_length:
                continue
            angle_point = normalize_angle(math.atan2(dy, dx))
            angle_diff = min(abs(total_angle - angle_point),
                             2 * math.pi - abs(total_angle - angle_point))
            if angle_diff < math.radians(2) and distance < min_distance:
                min_distance = distance
                closest_point = point
        if closest_point:
            pygame.draw.circle(screen, (255, 255, 0), closest_point, 5)
            detections.append(closest_point)
    return detections

# ---------------- Initialize Pygame ----------------
pygame.init()
pygame.font.init()

scale       = 2
WIDTH       = 800 * scale
HEIGHT      = 600 * scale
WHITE       = (255, 255, 255)
RED         = (200, 0, 0)
BLUE        = (0, 0, 200)
BLACK       = (0, 0, 0)
screen      = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Car Simulation with Sensors and Collision Detection")

x_button_font = pygame.font.SysFont(None, 36)
x_button_text = x_button_font.render('X', True, WHITE)
x_button_rect = x_button_text.get_rect(center=(50, 100))

# Car attributes
car_width, car_height = 100, 40
x, y = WIDTH // 2, HEIGHT // 2
theta, phi = 0, 0
V, omega = 0, 0
L = car_width
dt = 1/60
scale_m = 20
max_phi = math.radians(30)

# Sensor attributes
sensor_angles = [-60, -45, -30, -15, 0, 15, 30, 45, 60]
sensor_length = 300

# PD gains
Kp = 0.1
Kd = 0.05
previous_lane_deviation = 0.0

# Data storage
top_distances    = []
bottom_distances = []
last_top_distance    = float('inf')
last_bottom_distance = float('inf')

running = True
clock   = pygame.time.Clock()

# Initialize the car
car = Car(x=WIDTH // 2, y=HEIGHT // 2)

# Initialize data storage
top_distances = []
bottom_distances = []
last_top_distance = float('inf')
last_bottom_distance = float('inf')

# PD controller parameters
Kp = 0.1
Kd = 0.01
prev_error = 0
threshold = 5  # Safe threshold for distance to center

# Main game loop
running = True
clock = pygame.time.Clock()

while running:
    screen.fill(BLACK)  # Clear the screen with black background
    initial_state = np.array([car.x, car.y, car.theta, car.phi])

    # Draw sine waves on a separate surface
    wave_surface = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
    wave1_points, wave2_points = draw_sine_waves(wave_surface, WHITE, WIDTH, HEIGHT)

    # Combine all wave points
    all_wave_points = wave1_points + wave2_points

    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        elif event.type == pygame.MOUSEBUTTONDOWN:
            if x_button_rect.collidepoint(event.pos):
                running = False

    # Get keys pressed
    keys = pygame.key.get_pressed()
    if keys[pygame.K_UP]:  # Move forward
        car.V = 5 * scale_m
    elif keys[pygame.K_DOWN]:  # Move backward
        car.V = -5 * scale_m
    else:
        car.V = 0  # Reset linear velocity

    # Simulate motion
    car.update_state()

    # Draw the car
    car.draw(screen)

    # Create masks for collision detection
    car_mask_surface = pygame.Surface((car_width, car_height), pygame.SRCALPHA)
    pygame.draw.rect(car_mask_surface, WHITE, (0, 0, car_width, car_height))
    rotated_car_mask = pygame.transform.rotate(car_mask_surface, -math.degrees(car.theta))
    car_mask = pygame.mask.from_surface(rotated_car_mask)
    car_rect = rotated_car_mask.get_rect(center=(car.x, car.y))

    wave_mask = pygame.mask.from_surface(wave_surface)
    wave_rect = wave_surface.get_rect()

    # Blit the wave surface onto the main screen
    screen.blit(wave_surface, (0, 0))

    # Simulate sensors
    car_pos = (car.x, car.y)
    # Calculate front position of the car
    front_x = car.x + (car_width / 2) * math.cos(car.theta)
    front_y = car.y + (car_width / 2) * math.sin(car.theta)
    front_pos = (front_x, front_y)

    # Simulate sensors from the front of the car
    top_distance, bottom_distance = simulate_sensors(front_pos, car.theta, sensor_angles, sensor_length, screen, all_wave_points, wave1_points, wave2_points)

    # If not detected, use last known distance
    if top_distance is None:
        top_distance = last_top_distance
    if bottom_distance is None:
        bottom_distance = last_bottom_distance

    # Store and remember distances
    top_distances.append(top_distance)
    bottom_distances.append(bottom_distance)
    last_top_distance = top_distance
    last_bottom_distance = bottom_distance

    # Calculate the distance to the lane center
    if top_distance is not None and bottom_distance is not None:
        lane_center_distance = (top_distance + bottom_distance) / 2
        distance_to_center = bottom_distance - lane_center_distance

        # Display the distance on the screen
        font = pygame.font.SysFont(None, 24)
        distance_text = font.render(f'Distance to Lane Center: {distance_to_center:.2f}', True, WHITE)
        screen.blit(distance_text, (400, 100))

        # Apply PD controller only if the error exceeds the threshold
        if abs(distance_to_center) > threshold:
            control = pd_controller(distance_to_center, prev_error, Kp, Kd, dt)
            car.phi = control
            prev_error = distance_to_center

    ''' Detect collision using masks
    collision_point = detect_collision(car_mask, car_rect, wave_mask, wave_rect)
    if collision_point:
        pygame.draw.circle(screen, (255, 0, 0), collision_point, 5)'''

    # Draw the X button
    pygame.draw.rect(screen, (255, 0, 0), x_button_rect)    
    screen.blit(x_button_text, x_button_rect)

    # Update the display
    pygame.display.flip()

    # Limit frames per second
    clock.tick(60)

# After main loop, plot the distances
plt.plot(top_distances, label='Top Lane Distance')
plt.plot(bottom_distances, label='Bottom Lane Distance')
plt.xlabel('Time (frames)')
plt.ylabel('Shortest Distance')
plt.title('Lane Distance Over Time')
plt.legend()
plt.show()

pygame.quit()
sys.exit()

if __name__ == "__main__":
    main()